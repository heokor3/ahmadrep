from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class Survey(StatesGroup):
    name = State()
    age = State()
    gender = State()
    interested = State()
    photo = State()
    submit = State()
    cancel = State()


cancel_but = types.KeyboardButton('cancel')
kb_cancel = types.ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_but)


async def start_survey(message: types.Message):
    await Survey.name.set()
    await message.answer('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', reply_markup=kb_cancel)


async def name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Survey.next()
    await message.answer('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')


kb_gen = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(
    types.KeyboardButton('–º—É–∂–ª–∞–Ω'),
    types.KeyboardButton('–ø–æ—Å—É–¥–æ–º–æ–π–∫–∞'),
    types.KeyboardButton('–Ω–µ –∑–Ω–∞—é')).add(  # —á—Ç–æ –±—ã –Ω–∏–∫–æ–≥–æ –Ω–µ —É—â–∏–º–ª—è—Ç—å
    cancel_but)


async def age(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if 100 > int(message.text) > 10:
            async with state.proxy() as data:
                data['age'] = message.text
            await Survey.next()
            await message.answer('–∫–∞–∫–æ–≥–æ –≤—ã –ø–æ–ª–∞?', reply_markup=kb_gen)
        else:
            await message.answer('–í–≤–æ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=kb_cancel)
    else:
        await message.answer('–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª–∫–æ —á–∏—Å–ª–∞', reply_markup=kb_cancel)


kb_int = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add(
    types.KeyboardButton('–º—É–∂—á–∏–Ω–∞'),
    types.KeyboardButton('–∂–µ–Ω—â–∏–Ω–∞'),
    types.KeyboardButton('–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')).add(cancel_but)


async def gender(message: types.Message, state: FSMContext):
    if message.text in ['–º—É–∂–ª–∞–Ω', '–ø–æ—Å—É–¥–æ–º–æ–π–∫–∞', '–Ω–µ –∑–Ω–∞—é']:
        async with state.proxy() as data:
            data['gender'] = message.text
        await message.answer('–∫—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Çü§≠',  # –∑–∞–∏–≥—Ä—ã–≤–∞–µ–º
                             reply_markup=kb_int)
        await Survey.next()
    else:
        await message.answer('–ë–∞–ª–±–µ—Å, –≤—ã–±–∏—Ä–∞–π –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –µ—Å—Ç—å', reply_markup=kb_gen)


async def inter(message: types.Message, state: FSMContext):
    if message.text in ['–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã']:
        async with state.proxy() as data:
            data['interested'] = message.text
            await message.answer('–°–∫–∏–Ω—å —Ñ–æ—Ç–∫—É ; )', reply_markup=kb_cancel)
            await Survey.next()
    else:
        await message.answer('–í—ã–∏–±—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—É—Ä–∞–ª–µ–π',
                             reply_markup=kb_int)


kb_submit = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                      one_time_keyboard=True).add(
    types.KeyboardButton('–¥–∞'),
    types.KeyboardButton('–Ω–µ—Ç'))


async def photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await Survey.next()
    await message.answer_photo(photo=data['photo'], caption=
    f"{data['name']}\n"
    f"{data['age']} –ª–µ—Ç\n"
    f"{data['gender']}\n"
    f"–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –≤ {data['interested']}\n")
    await message.answer('–≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', reply_markup=kb_submit)


async def submit(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        await message.answer('–∫—Ä—É—Ç–æ')
        await state.finish()
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('–Ω—É –∏ –ø–æ—à–µ–ª —Ç—ã')
        await state.finish()
    else:
        await message.answer('–≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—à–∞–∫ –ø–æ–ª–æ—Å–∞—Ç—ã–π', reply_markup=kb_submit)


async def cancel(message: types.Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state is not None:
        await state.finish()
        await message.answer('–Ω—É –∏ –ø–æ—à–µ–ª —Ç—ã')

# dp.register_message_handler(cancel,Text(equals='cancel', ignore_case=True) , state='*')
# dp.register_message_handler(start_survey, commands=['surv'])
# dp.register_message_handler(name, state=Survey.name)
# dp.register_message_handler(age, state=Survey.age)
# dp.register_message_handler(gender, state=Survey.gender)
# dp.register_message_handler(inter, state=Survey.interested)
# dp.register_message_handler(photo, state=Survey.photo, content_types=['photo'])
# dp.register_message_handler(submit, state=Survey.submit)
